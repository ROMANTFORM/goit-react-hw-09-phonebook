{"version":3,"sources":["redux/auth/auth-actions.js","redux/auth/auth-operations.js","components/LogIn.js","components/SignUp.js","components/AuthBar.js","redux/auth/auth-selectors.js","images/default-avatar.webp","components/UserBar.js","components/Navigation.js","components/Home.js","redux/contacts/contacts-actions.js","components/ContactForm.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactList.js","components/Filter.js","components/Contacts.js","components/PrivateRoute.js","components/PublicRouter.js","App.js","redux/auth/auth-reducers.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","token","headers","common","Authorization","initialState","email","password","LogIn","dispatch","useDispatch","useState","formData","setFormData","handleChange","fieldName","evt","prev","target","value","reset","className","onSubmit","credential","preventDefault","a","authActions","post","res","data","message","htmlFor","id","name","type","onChange","SignUp","autoComplete","AuthBar","to","activeClassName","getAuthenticated","state","auth","isLogedIn","getUserName","user","mapDispatchToProps","onLogout","connect","authSelector","avatar","defaultAvatar","src","alt","width","onClick","Navigation","isAuthenticated","useSelector","authSelectors","exact","Home","fetchContactsRequest","fetchContactsSucces","fetchContactsError","addContactsRequest","addContactsSucces","addContactsError","deleteContactsRequest","deleteContactsSucces","deleteContactsError","filterContact","number","ContactForm","contact","then","catch","error","addContact","getFilter","contacts","filter","getVisibleContacts","createSelector","items","normalizeFilter","toLowerCase","item","includes","ContactList","handleDelete","contactId","delete","map","selectors","actions","Contacts","this","props","fetchContacts","Component","get","component","redirectTo","routeProps","render","restricted","App","useEffect","getState","persistedToken","response","PublicRouter","path","initialUserState","createReducer","payload","combineReducers","action","contactName","console","log","alert","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducers","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94bf70ee.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n    registerRequest,\r\n    registerSuccess,\r\n    registerError,\r\n    loginRequest,\r\n    loginSuccess,\r\n    loginError,\r\n    logoutRequest,\r\n    logoutSuccess,\r\n    logoutError,\r\n    getCurrentUserRequest,\r\n    getCurrentUserSuccess,\r\n    getCurrentUserError,\r\n};","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n     },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = '';\r\n     },\r\n};\r\n\r\nexport const register = credential => async dispatch => {\r\n    dispatch(authActions.registerRequest());\r\n\r\n    try {\r\n        const res = await axios.post('/users/signup', credential);\r\n\r\n        token.set(res.data.token);\r\n        dispatch(authActions.registerSuccess(res.data));\r\n     } catch (error) {\r\n        dispatch(authActions.registerError(error.message));\r\n    }; \r\n };\r\n\r\nexport const logIn = credential => async dispatch => {\r\n    dispatch(authActions.loginRequest());\r\n\r\n    try {\r\n        const res = await axios.post('/users/login', credential);\r\n\r\n        token.set(res.data.token);\r\n        dispatch(authActions.loginSuccess(res.data));\r\n    } catch (error) {\r\n        dispatch(authActions.loginError(error.message));\r\n    };\r\n };\r\n\r\nexport const logOut = () => async dispatch => {\r\n    dispatch(authActions.logoutRequest());\r\n\r\n    try {\r\n        await axios.post('/users/logout');\r\n\r\n        token.unset();\r\n      dispatch(authActions.logoutSuccess());\r\n      \r\n    } catch (error) {\r\n        dispatch(authActions.logoutError(error.message));\r\n    };\r\n };\r\n\r\nexport const getCurrentUser = () => async (dispatch, getState) => {\r\n    \r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  };\r\n\r\n  token.set(persistedToken);\r\n\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n };","import {  useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as authOperations  from '../redux/auth/auth-operations';\r\n\r\nconst initialState = {\r\n    email: '',\r\n    password: '',\r\n}\r\n\r\nfunction LogIn() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [formData, setFormData] = useState(initialState);\r\n\r\n    const handleChange = (fieldName) => (evt) => {\r\n        setFormData(prev => ({...prev, [fieldName]: evt.target.value}))\r\n    }\r\n\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        dispatch(authOperations.logIn(formData));\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setFormData(initialState)\r\n    };\r\n\r\n    return (\r\n        <div className=\"Form-wrap\">\r\n            <form className=\"Form\" onSubmit={handleSubmit} >\r\n\r\n                <h2 className=\"Form-title\">Log In!</h2>\r\n\r\n\t\t        <p className=\"Form-p\">\r\n                    <label htmlFor=\"Email\" className=\"floatLabel\">\r\n                        Email\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"Email\"\r\n                            name=\"Email\"\r\n                            type=\"text\"\r\n                            value={formData.email}\r\n                            onChange={handleChange('email')}\r\n                        />\r\n                    </label>  \r\n\t\t        </p>\r\n\t\t        <p>\r\n                    <label htmlFor=\"password\" className=\"floatLabel\">\r\n                        Password\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={formData.password}\r\n                            onChange={handleChange('password')}\r\n                        />\r\n                    </label> \r\n\t\t        </p>\r\n\t\t        \r\n\t\t        <p>\r\n\t\t\t        <button type=\"submit\" className=\"Form-btn\">Log In!</button>\r\n\t\t        </p>\r\n\t        </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LogIn;","import React, { Component } from 'react';\r\nimport * as authOperations  from '../redux/auth/auth-operations';\r\nimport {  useState } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\nconst initialState = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n};\r\n\r\nfunction SignUp() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [formData, setFormData] = useState(initialState)\r\n\r\n    const handleChange = (fieldName) => (evt) => {\r\n        setFormData(prev => ({ ...prev, [fieldName]: evt.target.value }));\r\n    };\r\n   \r\n    const reset = () => { setFormData(initialState) };\r\n    \r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        dispatch(authOperations.register(formData))\r\n        reset();\r\n    };\r\n    \r\n    return (\r\n        <div className=\"Form-wrap\">\r\n            <form className=\"Form\" autoComplete=\"off\" onSubmit={handleSubmit}>\r\n\r\n                <h2 className=\"Form-title\">Sign Up</h2>\r\n\r\n                <p>\r\n                    <label htmlFor=\"name\" className=\"floatLabel\">\r\n                       Name\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            value={formData.name}\r\n                            type=\"text\"\r\n                            onChange={handleChange('name')}\r\n                        />\r\n                    </label>  \r\n\t\t        </p>\r\n\t\t        <p className=\"Form-p\">\r\n                    <label htmlFor=\"Email\" className=\"floatLabel\">\r\n                        Email\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"Email\"\r\n                            name=\"Email\"\r\n                            value={formData.email}\r\n                            type=\"text\"\r\n                            onChange={handleChange('email')}\r\n                        />\r\n                    </label>  \r\n\t\t        </p>\r\n\t\t        <p>\r\n                    <label htmlFor=\"password\" className=\"floatLabel\">\r\n                        Password\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            value={formData.password}\r\n                            type=\"password\"\r\n                            onChange={handleChange('password')}\r\n                        />\r\n                    </label> \r\n\t\t        </p>\r\n\t\t        \r\n\t\t        <p>\r\n\t\t\t        <button type=\"submit\" className=\"Form-btn\">Sign Up!</button>\r\n\t\t        </p>\r\n\t        </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SignUp;","import { NavLink } from \"react-router-dom\";\r\nimport LogIn from \"./LogIn\";\r\nimport SignUp from \"./SignUp\";\r\n\r\n\r\nfunction AuthBar() {\r\n    return (\r\n        <div className=\"Auth-wrap\">\r\n            <NavLink to=\"/login\" className=\"link\" activeClassName=\"active-link\">Log In</NavLink>\r\n            <NavLink to=\"/signup\" className=\"link\" activeClassName=\"active-link\">Sign up</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthBar;","export const getAuthenticated = state => state.auth.isLogedIn;\r\n\r\nexport const getUserName = state => state.auth.user.name;","export default __webpack_public_path__ + \"static/media/default-avatar.4cff0967.webp\";","\r\n// function UserBar() {\r\n//     return (\r\n//         <div>\r\n//             <h2>UserBar</h2>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default UserBar;\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as authSelector from \"../redux/auth/auth-selectors\";\r\nimport * as authOperation from \"../redux/auth/auth-operations\";\r\nimport defaultAvatar from '../images/default-avatar.webp';\r\n\r\nconst UserBar = ({avatar, name, onLogout}) => {\r\n    return (\r\n        <div className=\"Nav-Container__right\" >\r\n            <img src={avatar} alt={name} width=\"32\" />\r\n            <span className=\"Span\" >Hi, {name}</span>\r\n            <button type=\"button\" className=\"logout-btn\" onClick={onLogout}>\r\n                Logout\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    name: authSelector.getUserName(state),\r\n    avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onLogout: authOperation.logOut\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserBar);","import { NavLink } from 'react-router-dom';\r\nimport AuthBar from './AuthBar';\r\nimport UserBar from './UserBar';\r\nimport * as authSelectors from \"../redux/auth/auth-selectors\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Navigation() {\r\n\r\n    const isAuthenticated = useSelector(authSelectors.getAuthenticated)\r\n    return (\r\n        <nav className=\"Nav-wrap\">\r\n            <div className=\"Nav-menu\">\r\n                <NavLink exact to=\"/\" className=\"link\" activeClassName=\"active-link\">Home</NavLink>\r\n                <NavLink to=\"/contacts\" className=\"link\" activeClassName=\"active-link\">Contacts</NavLink>\r\n                 \r\n            </div>\r\n            <div className=\"User-menu\">\r\n                {isAuthenticated ? <UserBar /> : <AuthBar/>}\r\n                {/* <AuthBar/> */}\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;","\r\nfunction Home() {\r\n    return (\r\n        <div className=\"Home-wrap\">\r\n            <h2 className=\"Home-wrap__title\">wellcome!</h2>\r\n            <h3 className=\"Home-wrap__subtitle\">Log in and use your Contacts</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('fetchContactsRequest');\r\nexport const fetchContactsSucces = createAction('fetchContactsSucces');\r\nexport const fetchContactsError = createAction('fetchContactsError');\r\n\r\nexport const addContactsRequest = createAction('addContactsRequest');\r\nexport const addContactsSucces = createAction('addContactsSucces');\r\nexport const addContactsError = createAction('addContactsError');\r\n\r\nexport const deleteContactsRequest = createAction('deleteContactsRequest');\r\nexport const deleteContactsSucces = createAction('deleteContactsSucces');\r\nexport const deleteContactsError = createAction('deleteContactsError');\r\n\r\n\r\nexport const filterContact = createAction('fitlerContact');","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addContact } from \"../redux/contacts/contacts-operations\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    number: '',\r\n};\r\n\r\n\r\nfunction ContactForm() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [formData, setFormData] = useState(initialState);\r\n\r\n    const handleChange = fieldName => evt => {\r\n        setFormData(prev => ({ ...prev, [fieldName]: evt.target.value }))\r\n    };\r\n\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\ndispatch(addContact(formData))\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setFormData(initialState)\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"Contacts-wrap\">\r\n            <form className=\"Form\" onSubmit={handleSubmit} >\r\n\r\n                <h2 className=\"Form-title\">Add new Contact!</h2>\r\n\r\n\t\t        <p className=\"Form-p\">\r\n                    <label htmlFor=\"name\" className=\"floatLabel\">\r\n                        Name\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            value={formData.name}\r\n                            onChange={handleChange('name')}\r\n                        />\r\n                    </label>  \r\n\t\t        </p>\r\n\t\t        <p>\r\n                    <label htmlFor=\"number\" className=\"floatLabel\">\r\n                        Number\r\n                        <input\r\n                            className=\"Form-input\"\r\n                            id=\"number\"\r\n                            name=\"number\"\r\n                            type=\"text\"\r\n                            value={formData.number}\r\n                            onChange={handleChange('number')}\r\n                        />\r\n                    </label> \r\n\t\t        </p>\r\n\t\t        <p>\r\n\t\t\t        <button type=\"submit\" className=\"Contact-form-btn\">Add Contact</button>\r\n\t\t        </p>\r\n\t        </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactForm;","import axios from 'axios';\r\nimport {\r\n    addContactsRequest,\r\n    addContactsSucces,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSucces,\r\n    deleteContactsError,\r\n    fetchContactsRequest,\r\n    fetchContactsSucces,\r\n    fetchContactsError,\r\n} from './contacts-actions';\r\n\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSucces(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nexport const addContact = ({name, number}) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n    dispatch(addContactsRequest());\r\n\r\n    axios.post('/contacts', contact)\r\n        .then(({data}) => dispatch(addContactsSucces(data)))\r\n        .catch(error => dispatch(addContactsError(error.message)));\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactsRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(res => dispatch(deleteContactsSucces(contactId)))\r\n        .catch(error => dispatch(deleteContactsError(error.message)));\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getIsLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getFilter, getAllContacts],\r\n    (filter, items) => {\r\n        const normalizeFilter = filter.toLowerCase();\r\n\r\n        return items.filter(item => item.name.toLowerCase().includes(normalizeFilter));\r\n     }\r\n);","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { getVisibleContacts } from '../redux/contacts/contacts-selectors';\r\nimport { deleteContact } from '../redux/contacts/contacts-operations';\r\n\r\n\r\nfunction ContactList() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const contacts = useSelector(getVisibleContacts);\r\n\r\n    const handleDelete = (id) => dispatch(deleteContact(id))\r\n\r\n\r\n    return (\r\n        <div className=\"Contact-list-wrap\" >\r\n            <ul className=\"Contact-container__list\">\r\n                {contacts.map(contact => (\r\n                    <li key={contact.id} className=\"Contact-container__item\">{contact.name}: {contact.number}\r\n                        <button\r\n                            onClick={() => handleDelete(contact.id)}\r\n                            className=\"Contact-list__btn\" >Delete\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactList;","import { connect } from \"react-redux\";\r\nimport * as actions from '../redux/contacts/contacts-actions';\r\nimport * as selectors from '../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst Filter = ({value, onChange}) => {\r\n\r\n    return (\r\n        <div className=\"Filter-container\">\r\n            <h3>Find contact by name</h3>\r\n            <label>\r\n                <input\r\n                    className=\"Filter-input\"\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                ></input>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: selectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (evt) => dispatch(actions.filterContact(evt.target.value))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from './ContactForm';\r\nimport ContactList from './ContactList';\r\nimport Filter from './Filter';\r\nimport * as contactOperations from \"../redux/contacts/contacts-operations\";\r\n\r\nclass Contacts extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContacts();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"Contact-container\">\r\n      \r\n            <div className=\"Contact-form__wrapper\">\r\n                <ContactForm />\r\n            </div>\r\n            \r\n            <div className=\"Contact-list__wrapper\">\r\n                <h2>Contacts</h2>\r\n        \r\n                <Filter />\r\n        \r\n                <ContactList />\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchContacts: () => dispatch(contactOperations.fetchContacts())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Contacts);\r\n\r\n// function Contacts() {\r\n\r\n//     const [name, setName] = useState('');\r\n//     const [number, setNumber] = useState('');\r\n\r\n//     const handleNameChange = evt => setName(evt.target.value);\r\n\r\n//     const handleNumChange = evt => setNumber(evt.target.value);\r\n\r\n//     const handleSubmit = evt => {\r\n//         evt.preventDefault();\r\n//         reset();\r\n//     };\r\n\r\n//     const reset = () => {\r\n//         setName('');\r\n//         setNumber('');\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"Contact-container\">\r\n      \r\n//             <div className=\"Contact-form__wrapper\">\r\n//                 <ContactForm />\r\n//             </div>\r\n            \r\n//             <div className=\"Contact-list__wrapper\">\r\n//                 <h2>Contacts</h2>\r\n        \r\n//                 <Filter />\r\n        \r\n//                 <ContactList />\r\n//             </div>\r\n          \r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Contacts;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as authSelectors  from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport * as authSelectors  from '../redux/auth/auth-selectors';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import React, { Suspense, lazy } from 'react';\nimport { Switch } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport * as authOperations from './redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\nimport Loader from \"react-loader-spinner\";\n// Components\nimport Navigation from './components/Navigation';\nimport Home from './components/Home';\nimport Contacts from './components/Contacts';\nimport LogIn from './components/LogIn';\nimport SignUp from './components/SignUp';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRouter from './components/PublicRouter';\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n \n  useEffect(() => {\n    dispatch(authOperations.getCurrentUser())\n   }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Navigation />\n\n      <Switch>\n        <PublicRouter exact path=\"/\" component={Home}/>\n        <PrivateRoute path=\"/contacts\" component={Contacts} restricted redirectTo=\"/login\" />\n        <PublicRouter path=\"/login\" component={LogIn} restricted redirectTo=\"/contacts\" />\n        <PublicRouter path=\"/signup\" component={SignUp} restricted redirectTo=\"/contacts\" />\n      </Switch>\n     \n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (state, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (state, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (state, {payload}) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (state, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (state, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n  \r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (state, { payload }) => payload,\r\n  [authActions.loginError]: (state, { payload }) => payload,\r\n  [authActions.logoutError]: (state, { payload }) => payload,\r\n  [authActions.getCurrentUserError]: (state, {payload}) => payload,\r\n});\r\n\r\nconst isLogedIn = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n})\r\n\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  isLogedIn,\r\n  error,\r\n});","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactsRequest,\r\n    addContactsSucces,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSucces,\r\n    deleteContactsError,\r\n    filterContact,\r\n    fetchContactsRequest,\r\n    fetchContactsSucces,\r\n    fetchContactsError,\r\n} from './contacts-actions';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSucces]: (state, action) => action.payload,\r\n\r\n    [addContactsSucces]: (state, action) => {\r\n        \r\n        const contactName = state.map(contact => contact.name.toLowerCase());\r\n        console.log(contactName)\r\n        if (contactName.includes(action.payload.name.toLowerCase())) {\r\n            return alert('This contact is already in your list!')\r\n        };\r\n        \r\n        return ([action.payload, ...state])\r\n    } ,\r\n\r\n    [deleteContactsSucces]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [filterContact]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSucces]: () => false,\r\n    [fetchContactsError]: () => false,\r\n\r\n    [addContactsRequest]: () => true,\r\n    [addContactsSucces]: () => false,\r\n    [addContactsError]: () => false,\r\n\r\n    [deleteContactsRequest]: () => true,\r\n    [deleteContactsSucces]: () => false,\r\n    [deleteContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport storage from 'redux-persist/lib/storage';\r\nimport authReducers from \"./auth/auth-reducers\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport {\r\n  persistReducer,\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n \r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  \r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        auth: persistReducer(authPersistConfig, authReducers),\r\n        contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/base.scss';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          \n            <App />\n          \n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}